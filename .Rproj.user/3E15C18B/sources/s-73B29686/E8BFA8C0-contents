### Functions for downloading divisions data

# Raw Commons divisions queries -----------------------------------------------

#' Fetch data on all Commons divisions available from the API
#'
#' @keywords internal

fetch_cds_raw <- function() {
    divisions <- process_pagination(stringr::str_glue("{API_GENERAL}search"))
    divisions <- format_cds_raw(divisions)
    assign(CACHE_CDS_RAW, divisions, envir = cache)
    divisions
}

#' Fetch data on individual Commons divisions available from the API
#'
#' @keywords internal

fetch_cds_votes_raw <- function(division_id) {

    divisions <- purrr::map_df(division_id, function(id) {
        division <- request(stringr::str_glue("{API_SINGLE}{id}.json"))
        tibble::tibble(
                division_id = division$DivisionId,
                division_number = division$Number,
                division_date = division$Date,
                division_title = division$Title,
                aye_votes = list(division$Ayes),
                no_votes = list(division$Noes),
                abstained = list(division$NoVoteRecorded))
    })

    # Return
    divisions
}

#' Fetch data on MPs voting for divisions available from the API
#'
#' @keywords internal

fetch_cds_members_raw <- function(
    member_mnis_id,
    from_date = NA,
    to_date = NA,
    on_date = NA) {

    member_ids <- member_mnis_id
    divisions <- purrr::map_df(member_ids, function(id) {
        divisions <- process_pagination_member(
            stringr::str_glue("{API_GENERAL}membervoting"),
            id)
    })
    divisions <- format_cds_members_raw(divisions)

    # Filter on dates if requested
    if (!is.na(from_date) || !is.na(to_date)) {
        divisions <- filter_dates(
            divisions,
            start_col = "division_date",
            end_col = "division_date",
            from_date = from_date,
            to_date = to_date)
    }

    # Return
    divisions
}

#' Filter data on all Commons divisions
#'
#' @keywords internal

fetch_cds_raw_filter <- function(
    from_date = NA,
    to_date = NA,
    on_date = NA) {

    # Set from_date and to_date to on_date if set
    if (!is.na(on_date)) {
        from_date <- on_date
        to_date <- on_date
    }

    # Check cache
    if (!exists(CACHE_CDS_RAW, envir = cache)) {
        divisions <- fetch_cds_raw()
    } else {
        divisions <- get(CACHE_CDS_RAW, envir = cache)
    }

    # Filter on dates if requested
    if (!is.na(from_date) || !is.na(to_date)) {
        divisions <- filter_dates(
            divisions,
            start_col = "division_date",
            end_col = "division_date",
            from_date = from_date,
            to_date = to_date)
    }

    # Return
    divisions
}

# Main Commons divisions queries ----------------------------------------------

#' Fetch key details on all Commons divisions
#'
#' \code{fetch_cds_all} fetches data from the Commons Votes API
#' showing key details about each division, with one row per division.
#'
#' The from_date and to_date arguments can be used to filter divisions based
#' on the dates they occurred. The on_date argument is a convenience that sets
#' the from_date and to_date to the same given date. The on_date has priority:
#' if the on_date is set, the from_date and to_date are ignored.
#'
#' @param from_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the from_date.
#' @param to_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the to_date.
#' @param on_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the on_date.
#' @return A tibble of key details for each Commons division, with one row
#' per division.
#' @export

fetch_cds_all <- function(
    from_date = NA,
    to_date = NA,
    on_date = NA) {

    # Fetch / filter raw data
    divisions <- fetch_cds_raw_filter(
        from_date,
        to_date,
        on_date)

    # Return
    divisions %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$aye_count,
            .data$no_count)
}

#' Fetch key details on all Commons EVEL divisions
#'
#' \code{fetch_cds_evel} fetches data from the Commons Votes API
#' showing key details about each EVEL division, with one row per EVEL division.
#'
#' The from_date and to_date arguments can be used to filter divisions based
#' on the dates they occurred. The on_date argument is a convenience that sets
#' the from_date and to_date to the same given date. The on_date has priority:
#' if the on_date is set, the from_date and to_date are ignored.
#'
#' @param from_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the from_date.
#' @param to_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the to_date.
#' @param on_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the on_date.
#' @return A tibble of key details for each Commons EVEL division, with one row
#' per EVEL division.
#' @export

fetch_cds_evel <- function(
    from_date = NA,
    to_date = NA,
    on_date = NA) {

    # Fetch / filter raw data
    divisions <- fetch_cds_raw_filter(
        from_date,
        to_date,
        on_date)

    # Return
    divisions %>%
        dplyr::filter(
            !is.na(.data$evel_type)) %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$evel_type,
            .data$evel_country,
            .data$aye_count,
            .data$no_count,
            .data$double_majority_aye_count,
            .data$double_majority_no_count)
}

#' Fetch key details on all Commons deferred divisions
#'
#' \code{fetch_cds_deferred} fetches data from the Commons Votes API
#' showing key details about each deferred division, with one row per deferred division.
#'
#' The from_date and to_date arguments can be used to filter divisions based
#' on the dates they occurred. The on_date argument is a convenience that sets
#' the from_date and to_date to the same given date. The on_date has priority:
#' if the on_date is set, the from_date and to_date are ignored.
#'
#' @param from_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the from_date.
#' @param to_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the to_date.
#' @param on_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the on_date.
#' @return A tibble of key details for each Commons deferred division, with one row
#' per deferred division.
#' @export

fetch_cds_deferred <- function(
    from_date = NA,
    to_date = NA,
    on_date = NA) {

    # Fetch / filter raw data
    divisions <- fetch_cds_raw_filter(
        from_date,
        to_date,
        on_date)

    # Return
    divisions %>%
        dplyr::filter(
            .data$is_deferred == TRUE) %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$aye_count,
            .data$no_count)

}

#' Fetch key details on all Commons divisions tellers
#'
#' \code{fetch_cds_tellers} fetches data from the Commons Votes API
#' showing key details about each division teller, with one row per division
#' teller.
#'
#' The from_date and to_date arguments can be used to filter divisions based
#' on the dates they occurred. The on_date argument is a convenience that sets
#' the from_date and to_date to the same given date. The on_date has priority:
#' if the on_date is set, the from_date and to_date are ignored.
#'
#' @param from_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the from_date.
#' @param to_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the to_date.
#' @param on_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the on_date.
#' @return A tibble of key details for each Commons deferred division, with one row
#' per deferred division.
#' @export

fetch_cds_tellers <- function(
    from_date = NA,
    to_date = NA,
    on_date = NA) {

    # Fetch / filter raw data
    divisions <- fetch_cds_raw_filter(
        from_date,
        to_date,
        on_date)

    # Extract tellers and bind rows
    aye_tellers <- divisions %>%
        tidyr::unnest(.data$aye_tellers) %>%
        janitor::clean_names() %>%
        dplyr::mutate(division_lobby = "Aye") %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$division_lobby,
            .data$member_id,
            .data$party,
            .data$member_from)

    no_tellers <- divisions %>%
        tidyr::unnest(.data$no_tellers) %>%
        janitor::clean_names() %>%
        dplyr::mutate(
            division_lobby = "No") %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$division_lobby,
            .data$member_id,
            .data$party,
            .data$member_from)

   # Bind
   divisions <- dplyr::bind_rows(aye_tellers, no_tellers)
   divisions <- divisions %>%
       dplyr::rename(
           mnis_id = member_id,
           member_party = party,
           member_constituency = member_from)
   divisions$mnis_id %<>% as.character()

   # Join
   members <- fetch_mps()
   divisions <- dplyr::left_join(divisions, members, by = "mnis_id")

   # Return
   divisions %>%
       dplyr::select(
           .data$division_id,
           .data$division_number,
           .data$division_date,
           .data$division_title,
           .data$division_lobby,
           .data$mnis_id,
           .data$given_name,
           .data$family_name,
           .data$display_name,
           .data$gender)
}

#' Fetch key details on Commons divisions votes
#'
#' \code{fetch_cds_votes} fetches data from the Commons Votes API
#' showing key details about each division vote, with one row per division
#' vote. All votes or abstentions are returned.
#'
#' @param division_id An integer or vector of integers representing a division
#' ID.
#' @return A tibble of key details of voting for a Commons division , with one row
#' per vote.
#' @export

fetch_cds_votes <- function(division_id) {

    # Fetch
    divisions <- fetch_cds_votes_raw(division_id)

    # Extract aye votes
    aye_votes <- divisions %>%
        tidyr::unnest(.data$aye_votes) %>%
        format_cds_votes_raw() %>%
        dplyr::mutate(vote_direction = "Aye") %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$vote_direction,
            .data$mnis_id,
            .data$party,
            .data$member_from)

    # Extract no votes
    no_votes <- divisions %>%
        tidyr::unnest(.data$no_votes) %>%
        format_cds_votes_raw() %>%
        dplyr::mutate(vote_direction = "No") %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$vote_direction,
            .data$mnis_id,
            .data$party,
            .data$member_from)

    # Extract abstain votes
    abstained <- divisions %>%
        tidyr::unnest(.data$abstained) %>%
        format_cds_votes_raw() %>%
        dplyr::mutate(vote_direction = "Abstained") %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$vote_direction,
            .data$mnis_id,
            .data$party,
            .data$member_from)

    # Bind
    divisions <- dplyr::bind_rows(aye_votes, no_votes, abstained)

    # Join
    members <- fetch_mps()
    divisions <- dplyr::left_join(divisions, members, by = "mnis_id")

    # Return
    divisions %>%
        dplyr::rename(
            member_party = party,
            member_constituency = member_from) %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$vote_direction,
            .data$mnis_id,
            .data$given_name,
            .data$family_name,
            .data$display_name,
            .data$gender)

}

#' Fetch key details on Commons divisions votes grouped by party
#'
#' \code{fetch_cds_party} fetches data from the Commons Votes API
#' showing key details about each division vote grouped by party, with one row
#' per division vote direction. All votes or abstentions are returned.
#'
#' @param division_id An integer or vector of integers representing a division
#' ID.
#' @return A tibble of key details of voting grouped by party for a Commons
#' division, with one row per vote direction.
#' @export

fetch_cds_party <- function(division_id) {

    # Fetch
    divisions <- fetch_cds_votes(division_id)

    # Return
    divisions %>%
        dplyr::group_by(
            division_id,
            division_number,
            division_date,
            division_title,
            member_party) %>%
        dplyr::count(vote_direction) %>%
        dplyr::rename(vote_count = n) %>%
        dplyr::arrange(
            division_id,
            vote_direction,
            member_party)
}

#' Fetch key details MPs voting record for divisions
#'
#' \code{fetch_cds_members} fetches data from the Commons Votes API
#' showing key details about the voting record for an MP for each division,
#' with one row per division. Only whether an MP voted "Aye" in a division
#' is returned.
#'
#' The from_date and to_date arguments can be used to filter divisions based
#' on the dates they occurred. The on_date argument is a convenience that sets
#' the from_date and to_date to the same given date. The on_date has priority:
#' if the on_date is set, the from_date and to_date are ignored.
#'
#' @param member_mnis_id An integer or vector of integers representing a member
#'   mnis ID.
#' @param from_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the from_date.
#' @param to_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the to_date.
#' @param on_date A string or Date representing a date. If a string is used
#'   it should specify the date in ISO 8601 date format e.g. '2000-12-31'. The
#'   default value is NA, which means no records are excluded on the basis of
#'   the on_date.
#' @return A tibble of key details for each Commons deferred division, with one row
#' per deferred division.
#' @export

fetch_cds_members <- function(
    member_mnis_id,
    from_date = NA,
    to_date = NA,
    on_date = NA) {

    # Fetch
    divisions <- fetch_cds_members_raw(
        member_mnis_id,
        from_date,
        to_date,
        on_date)

    # Join
    members <- fetch_mps()
    divisions <- dplyr::left_join(divisions, members, by = "mnis_id")

    # Return
    divisions %>%
        dplyr::select(
            .data$division_id,
            .data$division_number,
            .data$division_date,
            .data$division_title,
            .data$mnis_id,
            .data$given_name,
            .data$family_name,
            .data$display_name,
            .data$gender,
            .data$member_voted_aye,
            .data$member_was_teller)
}
